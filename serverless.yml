# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: microservice-pdp-v-2

frameworkVersion: '3'

# plugins:
#   - serverless-offline

custom:
  authorizer: arn:aws:lambda:${self:provider.region}:985430231206:function:auth-service-cognito-${self:provider.stage}-login
  AUCTION_TABLE_V2_NAME: 'Auction-V2-${self:provider.stage}'
  MailQueue:
    arn: ${cf:microservice-notification-${self:provider.stage}.MailQueueArn}
    url: ${cf:microservice-notification-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket: arn:aws:s3:::auction-bucket-random123-dev
  serverless-offline:
    host: 0.0.0.0
    httpPort: 4001
    lambdaPort: 4003

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  profile: pdp-auction
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:Scan'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
            - 'dynamodb:Query'
          Resource:
            - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.AUCTION_TABLE_V2_NAME}'
            - !Join ['/', [ 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.AUCTION_TABLE_V2_NAME}', 'index', 'statusAndEndDate' ]]
        - Effect: 'Allow'
          Action:
           - sqs:SendMessage
          Resource: ${self:custom.MailQueue.arn}
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::auction-bucket-random123-dev/*

functions:
  createAuction:
    handler:  handler.createAuctionHandler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: ${self:custom.authorizer}
  deleteAuction:
    handler:  handler.deleteAuctionHandler
    events:
      - http:
          method: DELETE
          path: /auction/{auctionId}
          authorizer: ${self:custom.authorizer}
  getAuctionById:
    handler:  handler.findAuctionByIdHandler
    events:
      - http:
          method: GET
          path: /auction/{auctionId}
          authorizer: ${self:custom.authorizer}
  auctionList:
    handler:  handler.getAuctionsListHandler
    events:
      - http:
          method: GET
          path: /auctions/{status}
          authorizer: ${self:custom.authorizer}
  placeBid:
    handler:  handler.placeBidHandler
    events:
      - http:
          method: PATCH
          path: /auction/{auctionId}/bid
          authorizer: ${self:custom.authorizer}
  processAuctions:
    handler: src/handlers/auctions.processAuctions
    # events:
    #   - schedule: rate(1 minute)

  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          method: PATCH
          path: auction/{auctionId}/picture
          authorizer: ${self:custom.authorizer}

resources:
  Resources:
    AuctionV2: 
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.AUCTION_TABLE_V2_NAME}
        AttributeDefinitions:
         - AttributeName: id
           AttributeType: S
         - AttributeName: status
           AttributeType: S
         - AttributeName: endingAt
           AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: statusAndEndDate
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: endingAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              WriteCapacityUnits: 1
              ReadCapacityUnits: 1
        ProvisionedThroughput:
          WriteCapacityUnits: 1
          ReadCapacityUnits: 1